# vi: filetype=sh

# Push all the local branches and tags
gp()
{
  git remote | xargs -L1 git push --all
  git remote | xargs -L1 git push --tags
}

# Clone a users repository, this depends on the current directory having the
# correct username.
gicp() {
  GITHUB_USER=$(basename `pwd`)
  GITHUB_PROJECT=$1

  echo "Will clone $GITHUB_PROJECT for $GITHUB_USER" 

  if [ ! -d "$GITHUB_PROJECT" ]; then
    echo Cloning $GITHUB_PROJECT
    git clone https://github.com/$GITHUB_USER/$GITHUB_PROJECT
  else
    echo There seems to already be directory named $GITHUB_PROJECT
    echo Updating instead.
    cd $GITHUB_PROJECT
    git pull
    cd ..
  fi
}

# Create mp3 file from youtube video.
_onlymp3() {
  yt-dlp --extract-audio --audio-format mp3 $1
}

# Only download mp4 files
_onlymp4() {
  yt-dlp -f "bestvideo[ext=mp4]+bestaudio[ext=m4a]/best[ext=mp4]/best" $1
}

# Retrieve new updates to my key.
_refreshk() {
  myid=756753E5
  echo "Refreshing $myid"
  gpg --keyserver pool.sks-keyservers.net --send-key $myid
  gpg --refresh-key $myid
}

# List URLs from website.
_href() {
  lynx -dump -listonly
}

# Retrieve missing keys for email verification.
_fetchMissingKeys() {
# Source Start { http://www.commandlinefu.com/
  echo "Fetching any missing keys for $myid"
  for i in `gpg --list-sigs | perl -ne 'if(/User ID not found/){s/^.+([a-fA-F0-9]{8}).*/\1/; print}' | sort | uniq`; do gpg --keyserver-options no-auto-key-retrieve --recv-keys $i; done
# } Source End
}

# Clone a whole github organization.
orgclone() {
  mkdir -p $1
  cd $1
  curl -s https://api.github.com/orgs/$1/repos?per_page=200 | ruby -rubygems -e 'require "json"; JSON.load(STDIN.read).each { |repo| %x[git clone #{repo["ssh_url"]} ]}'
  cd -
}

# Show commits by authors.
cpa() {
  git shortlog -s -n
}

# Compile BPF program.
__bcc() {
  clang -O2 -emit-llvm -c $1 -o - | \
    llc -march=bpf -filetype=obj -o "`basename $1 .c`.o"
}

# Compile with local LLVM and clang
make_with_clang() {
  make CLANG=~/src/llvm.org/llvm/build/bin/clang LLC=~/src/llvm.org/llvm/build/bin/llc
}

# Delete merged branches
dmb() {
  git branch -d `git branch --merged`
}
