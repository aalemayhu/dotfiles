gp()
{
  git push origin --all
  git push origin --tags
}


linz()
{
  mkdir -p $HOME/tmp
  filename=$(basename `pwd`)
  lintian > "$HOME/tmp/$filename-lintian.log"
}

rv()
{
  files=(./*)
  video="${files[RANDOM % ${#files[@]}]}"

  unamestr=`uname`
  if [[ "$unamestr" == 'Linux' ]]; then
    mplayer -fs "$video"
    read -p "Would you like to delete $video?(n/y)" -n 1 -r
    if [[ $REPLY =~ ^[Yy]$ ]]
    then
      rm "$video"
      echo
      echo "$video is deleted."
    fi
  else
    open "$video"
  fi
}

vimr()
{
  URL=$1
  SUFFIX=$(basename $URL)
  SHA=`echo $URL | shasum`
  FILENAME=${SHA//[[:blank:]]/}.$SUFFIX
  DOWNLOAD_PATH=/tmp/$FILENAME

  if [ ! -f $DOWNLOAD_PATH ]; then
    wget "$URL" -O "$DOWNLOAD_PATH"
  fi

  vim $DOWNLOAD_PATH
}

haxm_off()
{
  sudo kextunload –b com.intel.kext.intelhaxm
}

haxm_on()
{
  sudo kextload –b com.intel.kext.intelhaxm
}

gicp() {
  GITHUB_USER=$(basename `pwd`)
  GITHUB_PROJECT=$1

  if [ ! -d "$GITHUB_PROJECT" ]; then
    echo Cloning $GITHUB_PROJECT
    git clone https://github.com/$GITHUB_USER/$GITHUB_PROJECT
  else
    echo There seems to already be directory named $GITHUB_PROJECT
    echo Updating instead.
    cd $GITHUB_PROJECT
    git pull
    cd ..
  fi
}

lingb() {
  LINGUA=nb make build
}

note() {
  D=`date +"%A, %d. %Y"`
  TIME=`date "+%H:%M:%S"`
  NOTE_DIR=$HOME/notes
  NOTE=$NOTE_DIR/"$D.note"

  mkdir -p $NOTE_DIR

  if [ ! -f "$NOTE" ];
  then
    echo [Date: $D >> "${NOTE}"
  fi

  echo [$TIME] >> "${NOTE}"
  echo >> "${NOTE}"
  cat >> "${NOTE}"
}

xcd() {
  src_dir=$HOME/src/github.com
  work_dir=$src_dir/profsys/
  me_dir=$src_dir/scanf
  a_dir=$src_dir/apple
  c_dir="$HOME/Library/Mobile Documents/com~apple~CloudDocs"
  download_dir=$HOME/Downloads

  mkdir -p $work_dir
  mkdir -p $me_dir
  mkdir -p $download_dir

  if [[ $1 == *w* ]]; then
    cd $work_dir
  elif [[ $1 == *d* ]]; then
    cd $download_dir
  elif [[ $1 == *a* ]]; then
    cd $a_dir
  elif [[ $1 == *c* ]]; then
    cd $c_dir
  else
    cd $me_dir
  fi
}

_archive() {
  currentdir=`pwd`
  tmpdir="/tmp/`date | shasum | tr -d ' '`"
  mkdir -p $tmpdir

  revisions=`git rev-list --all --reverse`
  for rev in $revisions; do
    git archive --format=tar.gz $rev > $tmpdir/$rev.tar.gz
  done

  echo Stored archives in $tmpdir
}

_ymp3() {
  youtube-dl --extract-audio --audio-format mp3 $1
}

_refreshk() {
  myid=756753E5
  gpg --keyserver pgp.mit.edu --send-key $myid
  gpg --keyserver pool.sks-keyservers.net --send-key $myid
  gpg --refresh-key $myid
}

_href() {
  lynx -dump -listonly
}

# Source Start { http://www.commandlinefu.com/
_fetchMissingKeys() {
  for i in `gpg --list-sigs | perl -ne 'if(/User ID not found/){s/^.+([a-fA-F0-9]{8}).*/\1/; print}' | sort | uniq`; do gpg --keyserver-options no-auto-key-retrieve --recv-keys $i; done
}
# } Source End

adblog() {
  adb logcat -d > /tmp/logcat.log
}


afetch() {
  prev=`pwd`
  src_dir=$HOME/src/github.com/scanf
  cd $src_dir;
  for d in *; do
    if [ ! -d "$d/.git" ]; then
      echo $d is not a git repository
    else
      echo   $d
      cd "$src_dir/$d";
      git fetch --all
      cd ..
    fi
  done
  cd "$prev"
}

orgclone() {
  mkdir -p $1
  cd $1
  curl -s https://api.github.com/orgs/$1/repos?per_page=200 | ruby -rubygems -e 'require "json"; JSON.load(STDIN.read).each { |repo| %x[git clone #{repo["ssh_url"]} ]}'
  cd -
}

readlater() {
  l=$HOME/src/tmp
  mkdir -p $l
  cd $l
  gic $1
  cd -
}

cpa() {
  git shortlog -s -n
}
